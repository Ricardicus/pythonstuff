Splies, can be of any order. In this course we will use cubic splines. 
With splines we don't have Runge's phenomenon. With increased number of data points the grade of the 
polynomial will increase and the phenomenon occur. 

Cubic splines:
Def: Let s = C^2[a,b] called a cubic spline on [a,b] if s is a cubic polynomial s_i n each sub_interval
[x_i, x_i+1]: S(x) = sum(i: 0 -> m-1, s_i(x) ) wh 
ere
s_i(x) = a_i (x-x_i)^3 + b_i(x-x_i)^2 + c_i(x-x_i) + d_i, i = 0, ... , m-1

s is called a cubic interpolating polynoomail if s(x_i) = y_i for given data (x_i, y_i) i=0, ... , m

Conditions:

(1) s_i(x_i) = y_i
(2) s_m-1(s_m) = y_m
(3) s_i(x_i+1) = s_i+1(x_i+1)
(4) d/dx ( s_i (x_i) ) = d/dt ( s_i+1(x_i+1) )
(5) d^2/(dx^2) ( s_i(x_i+1) ) = d^2/(dx^2) ( s_i+1(x_i+1) )

-------> 4m - 2 equations need to be solved. 

the d_i = y_i, always. 
Let s''_i(x_i) = sigma_i
sigma_i = 2b_i (from second derivative of s_i(x))
-> b_i = sigma/2
x''_i(x_i) = x''_i+1(x_i+1)
Let the distance between nodes h = x_i+1 - x_i i.e equidistant
from second derivative and s''_i(x_i+1) = s''_i+1(x_i+1)
6*a_i*h + 2b_i = 2_b_i+1 <=> a_i = (2b_i+1 - 2b_i) / 6*h
c_i = (d_i+1 - d_i)/h - a_i*h^2 - b_i*h
c_i = (y_i+1 - y_i)/h - (sigma_i+1 - (sigma_i)/6) * h
c_i = ( y_i+1 - y_i ) / h - (2 * sigma_i + sigma_i+1) / 6 * h

Now all that i left is to determine sigma:
Fron (4):
3a_i*h^2 + 2b_ih + c_i = c_i+1
3*(sigma_i+1 - sigma_i)/6*h^2 + sigma_i*h + (y_i+1 - y_i)/h - (2sigma_i + sigma_i+1)/6*h = 
= (y_i+2 - y_i+1)/h - (2sigma_i+1 + sigma_i+2)/6 * h
=>
1/6*sigma_i+1*h + 2/3*sigma_i+1*h + 1/6*sigma_i*h = (y_i+2 - 2y_i+1 + y_i)/h

let i=1:
sigma_2 + 4sigma_1 + sigma_0 = 6/h^2(y_2-2*y_1+y_0)
let i=2:
sigma_3 + 4sigma_2 + sigma_1 = 6/h^2(y_3-2*y_2+y_1)
let i=3:
sigma_4 + 4sigma_3 + sigma_2 = 6/h^2(y_4-2*y_3+y_2)

knowing that we are dealing with a natural spline => s''_0(x_0) = 0 
and s''_0(x_0) = sigma_0 => sigma_0 = 0

gives us the system:

A x = b

(4 1 0 ......) (sigma_1) = 6/h^2 * ( 1 -2 1 0 ....) (y0)
(1 4 1 0.....) (sigma_2) 		   ( 0 1 -2 1 0 ..)	(y1)
(0 1 4 1 0 ..) (sigma_3)  		   ( 0 0 1 -2 1 ..) (y2)
(............) (.......) 		   (..............) (..)
(.........1 4) (sigma_m)           (..........1 -2)	(y_m)

The entire solution depends on the data so much that if one single data point is changed, 
the solution needs to be recalculated once again. 

B-splines or Basis-splines

A B-spline is a spline function that has minimal support.
THM: Every spline function of given degree smoothness and domain can be uniquelly represented as a linear 
combination of B-spline of same degree, smoothness and range.

Any spline has a unique representation through the following B-splines:
s(x) = sum(L, 1 -> m+1: d_i*N_L,4(x) ) Cubic B-spline

with sum(i, 1 -> m+3: N_i,4(x)) = 1
where d_i coefficients called de_Boor pts