Comments on the task:
B-splines not conventionally used for interpolation purposes. It's more of a design tool method. 

Quadrature Formulas:
- Newton-Cotes formula
- Composite
- Gaussian Quadratures

Deriving Quadratures: 	-> Taylor expansion
						-> Lagrange interpolating formula

Derive a 2-point quadrature from the Lagrange method. 
Assume points x_0, x_1 and f(x)
1) Obtain the Lagrange interpolation polynomial: p(x) = sum(i: 0->n, y_i*L_i(x)) + error
2) Integrate from x_0 to x_1: integral( p(x) ) = sum(i: 0->n, y_i * integral( x: x0->x1, L_i(x) ) + integral( x: x0->x1, error ) )

1) p(x) = sum(i: 0->n,yi product( (x-xi)/(xj-xi) ) + f^(n+1)(ep)/(n+1)! * product( i: 0->n, x-xi ))

Points: (x0, y0) : 
integral(x: x0 -> x1, p(x)) = y0*integral(x:x0->x1, (x-x0)/(x1-x0)) + y1*integral(x: x0->x1, (x-x1)/(x0-x1)) + f''(ep)/2! * integral(x: x0->x0), (x-x0)(x-x1) ) 
		(x1, y1)

2) Let h = x1 - x0:
	integral(x: x0->x1, p(x)) = y0 / h * (x-x0)^2 / 2Â ]^{x1}_{x0} + y1/-h (x-x1)^2/2 ]^{x1}_{x0} + f''(ep)/2(x^3/3 - (x0+x1)^x2/2 + x0x1x)]^{x1}_{x0}
<=> integral(x: x0->x1, p(x)) = y0/h(h^2/2) - y1/h(0 - (-h)^2/2) + f''(ep)/2 * [ 1/3*(x1^3 - x0^3) - (x0 + x1)*1/2*(x1^2-x0^2) + x0x1(x1-x0) ]

integral( x: x0->x1, p(x) ) = h/2(y0 + y1) + f''(ep)/12[2(x1^3-x0^3) - 3(x0+x1)(x1^2 - x0^2) + 6x0x1(x1-x0)] = h/2(y0+y1) + f''(ep)/12*h*(-x1^2 + 2x0x1 - x0^2) = h/2(y0+y1) - f''(ep)/12*h^3
			 ^			  ^
		trapezoidal		error

Derive z 3-pt Quadrature, assuming a continous function f(x) using Taylor expansion
(x0,y0), (x1,y1), (x2,y2)

f(x) = f(x1) + f'(x1)(x-x1) + f''(x1)/2! * (x-x1)^2 + f'''(x1)/3!*(x-x1)^3 + f''''(ep)/4!*(x-x1)^4

inegrate the above over [x0,x2] gives:

integral(x: x0->x2, f(x))	= f(x1)(x0-x2) + f'(x1)*[(x-x1)^2/2]{x0}{x2} + [f''(x1)/2(x-x1)^3/3]{x0}{x2} + [f'''(x1)/6*(x-x1)^4/4]{x0}{x2} + [f'''(ep)/24*(x-x1)^5/5]{x0}{x2} = { let h = x2-x1 = x1-x0 } = f(x1)(x2-x0) + f'(x1)*0 + f''(x1)/2*2/3*h^3 + f'''(x1)*0 + f''''(ep)/24(h^5/5) =
							= f(x1)2h + f''(x1)h^3/3 + f''''(ep)h^5/60
															^
														  error
we have:

integral(x: x0->x2, f(x)) = f(x1)2h + f''(x1)h^3/3 + f''''(ep)h^5/60
															^
														  error
This is not a formula since it contains derivatives. This is not numerically correct. 

We need to compute the derivatives:

f'(x1) = (f(x1) - f(x0))/(x1-x0)
f'(x2) = (f(x2) - f(x1))/(x2-x1)

f''(x1) = (f'(x2) - f'(x1))/(x2-x1) = ((f(x2) - f(x1))/(x2-x1) - (f(x1) - f(x0))/(x1-x0)) / (x2 - x1)

Let f=x2-x1=x1-x0 
=> f''(x1) = (f(x2) - 2f(x1) + f(x0))/h^2 

=> integral(x: x0->x2, f(x)) 	= 2hf(x1) + h/3(f(x2) - 2f(x1) + f(x0)) + f''''(ep)h^5/60
								= h/3(f(x2) + 4f(x1) + f(x0)) + f''''(ep)h^5/60
																      ^
																    error
The above is called simpson's 3-p rule. 

Example: Apply the trapezoidal rule to approximate the area under the curve f(x) = sqrt(x) between 1<=x<=7
		t = (sqrt(7) - sqrt(1)) / 2 = 6/2*(sqrt(7)+1)
		error = -1/4*ep^(-3/2)*1/12 <= -1/48*6^3 = 36/8 = 4.5

Simpson's

A approx= 3/3[ sqrt(7) + 4sqrt(4) + sqrt(1) ] = sqrt(7) + 8 + 1 = 11.646
error = -15/16 ep^(-7/2)*3^5/60 <= 15/16*3^5/60 = 3^5/64 apprx 3.8

the order of simpsons's method is in the order of 4 ( error proportional to the fourth derivative, no error for cubic functions )
the order of trapezoidal method is in the order of 2 ( ---||---, works only without error for linear functions )

